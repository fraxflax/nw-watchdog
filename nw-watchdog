#!/bin/sh
#
#       nw-watchdog is a higly configurable network watchdog written
#       in posix shell script for use in Linux.
# 
#       Get the latest version from https://github.com/fraxflax/nw-watchdog
#
#       nw-watchdog is free software written by Fredrik Ax <frax@axnet.nu>.
#       Feel free to modify and/or (re)distribute it in any way you like.
#       (It's always nice to be mentioned though ;-) )
#       It comes with ABSOLUTELY NO WARRANTY.
# 
# 
# frax - FIXME / TODO:
# 
# * add support making it easier to implement e-mail alerts to be sent only once for down and once for up
#   giving each alert an identifier and each identifyer having a 'trigged' and 'solved' state i.e.
# 
# * make sure all dependecies are checked
# 
# * Go through USAGE and provide some more EXAMPLES
#
# * The big one: IPv6 support
# 
# * MAYBE: Support multiple targets in one instance ????
#
#
##############################################################################
# DEFAULTS (can be overridden by config file, options always have precedence)
##############################################################################
TARGET=''                              # TARGET (destination) 

PINGNEXTHOP=y                          # --no-ping-nexthop | -N | --no-ping-gateway | -G
PINGTARGET=y                           # --no-ping-target | -P
IPADDRALRT=y                           # --no-ipaddr-alert | -A
IFCUPDOWN=y                            # --no-interface-reset | -R
FORK=y                                 # --foreground | --no-daemonize | -D

V=4				       # --verbosity-level | -V
IFC=''                                 # --interface | -i
STATICIFC=''                           # --force-interface | -I
LOGFILE='/var/log/nw-watchdog.log'     # --logfile | -l
LOGSIZE=0                              # --logsize | -z
PIDFILE=/run/nw-watchdog.pid	       # --pidfile | -p
SLOWUPTIMEOUT=7                        # --slow-up-timeout | -t
SLEEP=10                               # --interval | --sleep | -s
GRACE=40                               # --ifup-grace | -g
MAXNOLINK=1                            # --max-nolink | -n
IFCUPT='ifup %{IFC}'                   # --ifcup | -u
IFCDOWNT='ifdown %{IFC}'               # --ifcdown | -U
ALERTCMD='if which wall >/dev/null; then exec wall; else cat 1>&2; fi'
                                       # --alert | -a
SYSTEMDSERVICENAME=''                  # --install-systemd

# Let's put the "standard" paths first in PATH to ensure we get the standard utilities we need
PATH="/sbin:/bin:/usr/sbin:/usr/bin:$PATH"
DEPENDENCIES="basename cat cut date getent grep head id ip ping printf readlink sed sleep stat tail touch wc" 
deperr() { 
    echo "(PATH=$PATH)" 1>&2
    echo ' ' 1>&2
    echo '~~~~~~~~~~~~~~~~' 1>&2
    echo 'DEPENDENCY ERROR' 1>&2
    echo '~~~~~~~~~~~~~~~~' 1>&2
    echo 'The following executable(s) are lacking in your PATH:' 1>&2
    echo "   $@" 1>&2
    echo '... aborting!' 1>&2
    echo ' ' 1>&2
    exit 1
}
which which >/dev/null 2>&1 || deperr which
for x in $DEPENDENCIES; do which $x>/dev/null || lacking="$lacking $x"; done
[ -n "$lacking" ] && deperr $lacking

nwwatchdog=`basename "$0"` 2>/dev/null || nwwatchdog=nw-watchdog
USAGE() {
    [ -n "$1" ] && printf "$@"
    COLS=0; _b_=''; ___=''; __=''; which tput>/dev/null && { COLS=`tput cols`; _b_=`tput bold`; ___=`tput smul`; __=`tput sgr0`; }
    [ "$COLS" -gt 72 ] >/dev/null 2>&1 || COLS=72
    FMT=cat; which fmt>/dev/null && FMT="fmt -s -w $COLS"
    $FMT -s<<EOU

${_b_}NAME $__
        $nwwatchdog - Network Watchdog

${_b_}SYNOPSIS $__

        $_b_$nwwatchdog$__ [ OPTIONS ] ${___}TARGET$__

${_b_}DESCRIPTION $__
       $_b_$nwwatchdog$__ is a higly configurable network watchdog written in posix shell script for use in Linux, depending only on Linux most standard tools that are normally installed by default in all distributions (also see the ${_b_}DEPENDENCIES$__ section).

       It monitors the network connectivity to a specified target and/or the next hop towards that target, alerting upon lost connectivity explaining what is wrong. It can handle resetting the source interface and will detect topology changes and, if allowed, reconfigure itself accordingly. It's intended to run as a daemon and has an option to install itself as a systemd service.  If you want to monitor the connectivity to several targets, you can run several instances of $nwwatchdog using different $_b_--pidfile$__ option arguments.

       $_b_$nwwatchdog$__ is free software written by Fredrik Ax <frax@axnet.nu>.
       Feel free to modify and/or (re)distribute it in any way you like.
       ... it's always nice to be mentioned though ;-)
       It comes with ABSOLUTELY NO WARRANTY.

       Get the latest version from https://github.com/fraxflax/nw-watchdog

${_b_}TARGET $__
       The mandatory argument ${___}TARGET$__ is the target (destination) to monitor the connection to. ${___}TARGET$__ can be an IP address or a resolvable hostname / FQDN. If it's a hostname / FQDN, it will be resolved to an IP address (first one found) at startup and the resolved IP address will be used for the monitoring. Upon failed ping-checks the name will be resolved again and if it resolves to a new IP address, that will be used for the monitoring from there on.

${_b_}OPTIONS $__(no arguments)
       These options take no arguments, and may be specified in any order. They can be grouped (e.g. -vAP) in their short form, also having one of the OPTIONS that takes arguments last.

    $_b_--help | -h $__
        Shows this help in a pager ( less | more ) if available.

    $_b_--no-ping-target | -P $__
    	If the target is the nexthop (on the same subnet or a peer-to-peer address), reachability of the target is checked by arp cache status and ping.
	If the target is not on the same subnet as the source, the reachability of the target is checked by pinging it in a certain pattern (see $_b_--slow-up-timeout$__ for details.
	$_b_--no-ping-target$__ disables the ping-checks for the target. Only connectivity to the nexthop for the target is checked.
        It can be useful if target does filter ping or is unreachable and we still want to monitor the status of the source interface and nexthop.
        Only one of $_b_--no-ping-nexthop$__ and $_b_--no-ping-target$__ can be specified.

    $_b_--no-ping-nexthop | -N | --no-ping-gateway | -G $__
    	By default, if the connectivity to the target cannot be verified, the reachability of the nexthop (usually a gateway) is checked, firstly by checking it's status in the arp cache and then by pinging it, rechecking the arp cache status upon failed ping. 
        $_b_--no-ping-nexthop$__ disbles the reachaility check for the nexthop so only connectivity to target itself is checked. It can be useful if the nexthop is a peer-to-peer address and not setup to reply to ping.
        Only one of $_b_--no-ping-nexthop$__ and $_b_--no-ping-target$__ can be specified.

    $_b_--no-ipaddr-alert | -A $__
        Do not alert for not finding any global scope ip addresses on the source interface.

    $_b_--no-interface-reset | -R $__
        Do not try to bring down and up interface after failed connectivity checks.
        (Do not try to "repair" the connection", just monitor it.)

    $_b_--foreground | --no-daemonize | -D $__
        Do not daemonize, run in foreground.

    $_b_--verbose | -v $__
        Shortcut for $_b_--verbosity-level=5$__
        Cannot be combined with $_b_--verbosity-level$__.

    $_b_--debug | -d $__
        Shortcut for: $_b_--verbosity-level=6 $_b_--logfile=- $_b_--logsize=0 $_b_--pidfile=/dev/null $_b_--slow-up-timeout=1 $_b_--sleep=3 $_b_--ifup-grace=5 $_b_--alert='cat' $_b_--foreground$__ 

        If it's combined with any of the options it provides shortcuts for, the specified option will take precedence over the $_b_--debug$__ shortcut.

	This option cannot be combined with $_b_--install-systemd$__ (but it would be wise to test the configuration with $_b_--debug$__ before installing as a systemd service).


${_b_}OPTIONS$__ (with ARGUMENT)
        These opions takes a single argument each and may be specified in any order. Specify with equalsign or space or no space between option and argument. They can only be grouped last with the shortform of the NO-ARGUMENT-OPTIONS above (e.g. -PAV5).

EOU
#    $_b_--config | -c$__ ${___}filename$__
#    	If not specified, ${_b_}/etc/nw-watchdog.conf$__ is used if present and readable.
#	If filename specified but file not found, it will be generated based on current settings (as defined by defaults and current commandline options).
#
#	The config file syntax is posix shell script syntax for declaring environment variables
#	and may override any default values.
#	
#	No other variables or code is allowed in the file.
#	Empty lines and comments (as in shell-script) are ignored.
#
#	See each option for the corresponding environment variable name.
#	
$FMT<<EOU
    $_b_--verbosity-level | -V$__ ${___}level$__
        Default: $V
        Integer greater than or equal to zero.
        Determines how much info is logged to the logfile.

        ${_b_}0$__ - none
        No output to logfile and no alerts trigged at all ... pretty useless unless you just want to keep traffic going keeping a connecting alive without any alerts.

        ${_b_}1$__ - error
        Only logs and alerts on errors causing the $nwwatchdog not to function as intended.

        ${_b_}2$__ - warning
        Also logs and alerts on warnings about configuration, etc.

        ${_b_}3$__ - alert
        Log and alerts on connectivity failures, interface down, and other things disrupting the monitored connection, as well as on warnings and errors.
        Also see the $_b_--alert$__ option.

        ${_b_}4$__ - info (default)
        Same as level 3, but also logs some useful information on what's going on, such as topology changes, some test failures forcing more testing,  interface resets, etc

        ${_b_}5$__ - trace
        Logs even more info about which action is currently performed, including, all secondary tests that are run, when sleeping longer than usual, etc.

        ${_b_}6$__ - debug
        Logs even more internal details, e.g. SETTINGS used, all tests performed, all sleeps, and other debug info.

    ${_b_}--interface | -i$__ ${___}interface$__
        Where ${___}interface$__ is the name of the source interface to initially use.
        If not specified it will be determined from the FIB by looking at the route to the target. The reason to specify it even so would be to have $nwwatchdog bring it up if it's down when starting.

        The interface may dynamically change due to topology detection. If you want to force the use of a specific interface, use $_b_--force-interface$__ instead.

        Cannot be combined with $_b_--force-interface$__.

    $_b_--force-interface | -I$__ ${___}interface$__
        Where ${___}interface$__ is the name of the source interface to always use.
        Packets will always be sent from this interface, forwadring table will be ignored as well as conflicting topology changes.
        This is useful for monitoring the preferred path and making sure it's up, but does not really tell if you have connectivity to the target or not. In most cases you would want to use $_b_--interface$__ instead of this option or not specify any interface at all.
        Cannot be combined with $_b_--interface$__.

    $_b_--logfile | -l$__ ${___}logfile$__
        Default: '$LOGFILE'
        Logfile to use. If specified as '-' logs are written to stdout.

    $_b_--logsize | -z$__ ${___}size$__
        Default: $LOGSIZE

	If the logfile grows beyond this size, the oldest entries will be removed.

	You can use suffixes K, M, G for kilo / mega / giga bytes. (No suffix is same as K).
	Set to 0 for unlimited logfile size (which you would want if you do log rotation). 

	If the logfile is set to '-' (stdout) this option is ignored.

	If ${_b_}flock$__ is available, the logfile will be locked before written to or shrinked, otherwise there is a slight risk of loglines being lost if two or more instances of $_b_$nwwatchdog$__ are concurently running using the same logfile and at least one of them have $_b_--logsize$__ set to a value larger than 0.


    $_b_--pidfile | -p$__ ${___}pidfile$__
        Default: '$PIDFILE'
        Pidfile to use.

    $_b_--slow-up-timeout | -t$__ ${___}seconds$__
        Default: $SLOWUPTIMEOUT
        Integer greater than zero.

        The pingtest to check if a target is up is performed in several steps. First a "quick-up" test sends one single ICMP echo packet waiting for the reply for no more than 1 second. If that fails, a more thourough "slow-up" test sends 5 ICMP echos. This parameter controls how long to wait for each packet before timing out and sending the next packet. Using the default setting, the "slow-up" test takes up to $SLOWUPTIMEOUT * 5 seconds before failing, but if the connection is up, thanks to using adaptive ping (sending next echo packet as soon as the reply of the previous one is received), the entire slow-up test will not take notably longer than 5 * the RTT to the target.

	Summary:
	$_b_--slow-up-timeout$__ controls he TIMEOUT for waiting on each packet in the slow-up test.
        5 packets are always sent in the slow-up test.
        The packets are sent adaptively, meaning that as soon as a reply is received the next packet is sent without delay.
        DEADLINE = TIMEOUT * 5
        
        $_b_--slow-up-timeout=7$__ is useful for monitoring VPN connections via interfaces that need a long wake-up time if idle (due to regotiation of encryption, exchanging keys, reauthentication, etc).

        $_b_--slow-up-timeout=3$__ is useful for monitoring connections to targets with low - medium latency via interfaces that does not need a long wake-up time (e.g. ethernet interfaces).

        $_b_--slow-up-timeout=1$__ is suitable to use for monitoring local targets (e.g. nexthop) on ethernet carried subnets.

    $_b_--interval | --sleep | -s$__ ${___}seconds$__
        Default: $SLEEP
        Integer greater than zero.
        How many seconds to sleep after sucessful ping check. 

    $_b_--ifup-grace | -g$__ ${___}seconds$__
        Default: $GRACE
        Integer greater than zero.
        How many seconds to sleep before next check after interface has been reset.

    $_b_--max-nolink | -n$__ ${___}number$__
        Default: $MAXNOLINK
        Integer greater than or equal to zero.
        Maximum number of consecutive failed link checks in which the interface have been reset (brought down and up again) before doing new topology check.
        A word of warning: If set to 0 and interface is not up / goes down, infinite retries to bring the interface up will be made before checking topology. Only set it to 0 if you are sure that the specified interface should always be used and you want to make sure it's up before starting to monitor the connection.
        Typically, you would want to also use $_b_--force-interface$__ when using $_b_--max-nolink=0$__.

    $_b_--ifcup | -u $__ ${___}STRING$__ 
        Default: '$IFCUPT'
        ${___}STRING$__ will be passed to 'sh -c' to bring the interface up.
	%{IFC} will be dynmaically replaced with the interface name currently in use as source interface.

	Examples:
	    ifupdown:
              --ifcup='ifup %{IFC}'

	    ifupdown, non privilege user running $nwwatchdog:
              --ifcup='sudo ifup %{IFC}'

	    NetworkManager device:
              --ifcup='nmcli device up %{IFC}'

	    NetworkManager connection:
              --ifcup='nmcli connection up connection-name'

	    iproute2 + isc-dhcp-client:
              --ifcup='ip link set %{IFC} up && dhclient -pf /run/dhclient-%{IFC}.pid %{IFC}'

	    strongSwan IPSec (setup for IPSec policy routing): 
              --ifcup='ipsec up connection-name'
	      (see ${_b_}EXAMPLES$__  below for a more extensive IPSec example using vti tunnel interface)

    $_b_--ifcdown | -U $__ ${___}STRING$__
        Default: '$IFCDOWNT' 
        ${___}STRING$__ will be passed to 'sh -c' to bring the interface down.
	%{IFC} will be dynmaically replaced with the interface name currently in use as source interface.

	Examples:
	    ifupdown:
              --ifcdown='ifdown %{IFC}'

	    ifupdown, non privilege user running $nwwatchdog:
              --ifcdown='sudo ifdown %{IFC}'

	    NetworkManager device:
              --ifcdown='nmcli device down %{IFC}'

	    NetworkManager connection:
              --ifcdown='nmcli connection down %{IFC}-connection-name'

	    iproute2 + isc-dhcp-client:
              --ifcdown='kill \`cat /run/dhclient-%{IFC}.pid\` ; ip link set down %{IFC}'

	    strongSwan IPSec (setup for IPSec policy routing): 
              --ifcup='ipsec down connection-name'
	      (see ${_b_}EXAMPLES$__  below for a more extensive IPSec example using vti tunnel interface)

    $_b_--alert | -a $__ ${___}STRING$__
    	Default: '$ALERTCMD'
        Errors, warnings and alerts messages will be piped to: sh -c '${___}STRING$__'
	%{IFC} in ${___}STRING$__ will be dynmaically replaced with the interface name currently in use as source interface.
	Set to '-' to disable alerting (alerts will still be logged if --verbosity-level is 3 or higher).

	Example of howto email the alert messages using mailx (mailutils) with a custom from address:
	    --alert='mailx -a "From: nw-watchdog@this.hst" -s "nwwatchdog alert %{IFC}" my@email.adr'

	(((
	IN THE FUTURE THE ALERTING VARIABLES MIGHT BE EXTENDED WITH THESE:

	%{ID}  - the id of the alert (to be able to identify UP/DOWN alerts that belong together)

	%{CATEGORY} - the category of the alert, DOWN for lost conenctivity and UP for restored connectivity, ERROR for permanent errors, WARNING for things that might need reconfiguration

	%{IFC} - the interface name

	%{TARGET} - the target for which the connection is monitored

	a helper script ${_b_}nw-alert-email$__ will be provided inteded as a wrapper for email alerting, that will be able to handle these variables
	and show howto send just one email for each DOWN alert and then another for the corresponding UP alert.
        )))

    $_b_--install-systemd$__ ${___}SERVICENAME$__ 
        Will write a systemd service file /etc/systemd/system/nw-watchdog-${___}SERVICENAME$__.service file launching $nwwatchdog as a daemon with
        $_b_--pidfile$__=/run/nw-watchdog-${___}SERVICENAME$__.pid$__
        $_b_--lofile$__=/var/log/nw-watchdog-${___}SERVICENAME$__.log$__
	and otherwise with the exact same options as run (apart from the $_b_--install-systemd$__ option itself of course).

	If /etc/systemd/system/nw-watchdog-${___}SERVICENAME$__.service already exists, the service will be stopped and the file overwritten.

	It will then enable, start it and show status of the newly created nw-watchdog-${___}SERVICENAME$__.service.

	The ${___}SERVICENAME$__ must consist of at least 1 valid character ( 'a-z', 'A-Z', '0-9', '-' and '_' ) and be no longer than 236 characters.

        This option requires root privileges.

	Note:
	To completely remove the service do (as root):
	    systemctl stop nw-watchdog-${___}SERVICENAME$__.service
	    systemctl disable nw-watchdog-${___}SERVICENAME$__.service
	    rm /etc/systemd/system/nw-watchdog-${___}SERVICENAME$__.service

${_b_}EXAMPLES$__

	${___}ISP gateway monitoring:$__

    	$_b_$nwwatchdog $_b_--interval=60 $_b_--no-ping-target $__${___}1.2.3.4$__ $_b_--interface=$__${___}eth0$__ $_b_--slow-up-timeout=1 $_b_--ifup-grace=300$__

	Checking once a minute ($_b_--interval=60$__) that we have connectivity to the Internet Service Provider's gateway without actually pinging anything on the Internet ($_b_--no-ping-target $__${___}1.2.3.4$__) ... any Intenet address will do) allowing interface and topology detection (not using --force-interface or --max-no-link=0) but still, if down, bring the supposed initial interface towards the ISP up on startup ($_b_--interface=$__${___}eth0$__) expecting the ISP gateway to have an RTT below 1 second ($_b_--slow-up-timeout=1$__) and allowing the interface to be down for up to 5 minutes before considering it a permanent error rechecking topology ($_b_--ifup-grace=300$__).


	${___}ISP gateway monitoring with forced interface:$__

    	$_b_$nwwatchdog $_b_--no-ping-target $__${___}1.2.3.4$__ $_b_--force-interface=$__${___}eth0$__ $_b_--slow-up-timeout=1 $_b_--ifup-grace=30 $_b_--max-no-link=0 $_b_--interval=10$__

        Same as above but enforcing the use of the eth0 interface as we know that the ISP gateway should always be reachable via that interface and that is the only Internet facing interface we have. It must be brought up on startup if not already up and there is no use rechecking the topology if it's not up ($_b_--force-interface=$__${___}eth0$__), so if down, we retry to reset it every 30 seconds ($_b_--ifup-grace=30$__) forever ($_b_--max-no-link=0$__), checking the connectivity every 10 seconds ($_b_--interval=10$__).


	${___}Management of Strongswan IPSec with VTI tunnel interface:$__

        --ifcup='ipsec up connection-name ; ip tunnel add $IFACE mode vti local 4.3.2.1 remote 1.2.3.4 ttl 255 key 111 ; ip....

	strongswan ipsec (with iproute2 for vti tunnel interface): 


	${___}Wireguard full tunnel management:$__
	This is a more extensive example of how one can use $nwwatchdog to setup and monitor a wireguard full tunnel, also monitoring the connectivity to the wireguard server, running both whatchdogs as systemd services getting alerts via e-mail:

	Firstly, we setup the nw-watchdog systemd service for the wireguard server connection which we reach via the default route:

	$_b_$nwwatchdog$__ wgserver.domain.dom \\
EOU
    cat<<'EOU'
          --verbosity-level=3 \
	  --alert='mailx -a "From: nwwatchdog@`hostname -f`" -s "wgserver via %{IFC}" admin@`cat /etc/mailname`' \
	  --slow-up-timeout=3 \
	  --ifup-grace=20 \
	  --install-systemd=wgserver
EOU
    $FMT<<EOU

	Then we setup the monitor for the wireguard full tunnel which will also create and configure and bring the tunnel up (if not already) upon start of the sytemd service, making sure we have a /32 routes to all of the wireguard server's ip addresses that the hostname resolves to.
	Note: It would be smoother to use a script and --ifcup=/path/script, but it can also be done like this:

	$_b_$nwwatchdog$__ 10.0.0.1 \\
EOU
    cat<<'EOU'
	  --no-ping-nexthop \
	  --verbosity-level=3 \
	  --alert='mailx -a "From: nwwatchdog@`hostname -f`" -s "wireguard wg0" admin@`cat /etc/mailname`' \
	  --force-interface=wg0 \
	  --ifcup='ip link add wg0 type wireguard ;
                   ip link set wg0 up ;
                   wg setconf wg0 /etc/wireguard/wg0.conf ;
                   ip address add 10.0.0.2 peer 10.0.0.1 dev wg0 ;
	           getent ahostsv4 wgserver.my.dom | grep -oE "^[0-9.]+" | uniq
                   | while read addr; do
                       ip route add $addr/32 via `ip route show default | head -1 | cut -d" " -f3` ;
                   done ; 
                   ip route add 0.0.0.0/1 via 10.0.0.1 dev wg0 src 10.0.0.2 ; 
		   ip route add 128.0.0.0/1 via 10.0.0.1 dev wg0 src 10.0.0.2 2>/dev/null' \
          --ifcdown='ip link del wg0' \
	  --install-systemd=wg0     
EOU
    $FMT<<EOU
    We use $_b_--no-ping-nexthop$__ as the nexthop is the same as the target peer-to-peer address we monitor the connection for (in reality we don't need to specify it as it is the default behaviour if the target address is the same as the nexthop address).
    $___${_b_}OBSERVE$__ that the entire --ifcup='...' command need to be on a single line without line breaks (linebreaks added here for readability).
    

${_b_}DEPENDENCIES$__
        $nwwatchdog depends on the below executables being available in "/sbin:/bin:/usr/sbin:/usr/bin:\$PATH" or being shell-builtin. A check is done at startup and if any of these tools are missing, $nwwatchdog will exit with an error telling which are lacking.
	
EOU
    for dep in $DEPENDENCIES; do
		printf "        - ${_b_}%s$__\n" "$dep"
    done
    $FMT<<EOU

        $_b_$nwwatchdog$__ will function without the below listed utilities, but will use them to enhance its functionality if available.

	- ${_b_}flock$__
            If available the logfile will be locked before truncated or written to.
	    If not available, there is a slight risk of loglines being lost if two or more instances of $_b_$nwwatchdog$__ are concurently running using the same logfile and at least one of them have $_b_--logsize$__ set to a value larger than 0.

	- ${_b_}wall$__
	If available it will be used as default $_b_--alert$__ command. Otherwise, alerting will be done to stderr by default.

	- ${_b_}tput$__
	Is used to determine the terminal width and output bold and underlined text in this help page.

	- ${_b_}fmt$__
	Is used to format the help message if available.

	- ${_b_}less$__ (or ${_b_}more$__)
	Is used to page this help.

EOU
    [ -n "$1" ] && printf "$@"
}
USAGEpager() {
    if which less >/dev/null 2>&1; then
	USAGE "$@" | less -R 
    elif which more >/dev/null 2>&1; then
	USAGE "$@" | more
    else
	USAGE "$@"
    fi
}
dieUSAGEpager() {
    local PATN="\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nERROR: $1 ... aborting!\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
    shift
    USAGEpager "$PATN" "$@"
    exit 1
}
# Parse arguments
xTARGET='';xV='';xIFC='';xLOGFILE='';xLOGSIZE='';xPIDFILE='';xSLOWUPTIMEOUT='';xSLEEP='';xGRACE='';xMAXNOLINK='';xIFCUPT='';xIFCDOWNT='';xALERTCMD='';xSYSTEMDSERVICENAME=''
SOPTS='[hNPARDvd]' # Short options without arguments
while [ $# -gt 0 ]; do
    ARG="$1"; shift
    case "$ARG" in
	-h|--help)
	    USAGEpager
	    exit 0
	    ;;
	-N|--no-ping-nexthop|-G|--no-ping-gateway)
	    PINGNEXTHOP=''
	    ;;
	-P|--no-ping-target)
	    PINGTARGET=''
	    ;;
	-A|--no-ipaddr-alert)
	    IPADDRALRT=''
	    ;;
	-R|--no-interface-reset)
	    IFCUPDOWN=''
	    ;;
	-D|--no-daemonize|--foreground)
	    FORK=''
	    ;;
	-v|--verbose)
	    [ -z "$xV" ] || dieUSAGEpager "verbosity-level specified multiple times\n%s" \
					  "(exclusively use '-v', '--verbose', '-V' or '--verbosity-level' only once)"
	    xV=1; V=5
	    ;;
	-d|--debug)
	    [ -z "$xV" ] && V=6 
	    [ -z "$xLOGFILE" ] &&  { LOGFILE=''; LOGSIZE=0; }
	    [ -z "$xPIDFILE" ] && PIDFILE='/dev/null'
	    [ -z "$xSLOWUPTIMEOUT" ] && SLOWUPTIMEOUT=1
	    [ -z "$xSLEEP" ] && SLEEP=3
	    [ -z "$xGRACE" ] && GRACE=5
	    [ -z "$xALERTCMD" ] && ALERTCMD='cat'
	    FORK=''
	    ;;
	-${SOPTS}*) # single out short options without arguments
	    A=`printf "%s" "$ARG" | grep -oE '^..'`
	    B=-`printf "%s" "$ARG" | cut -c3-`
	    set -- "$A" "$B" "$@"
	    ;;
	-V*|--verbosity-level*)
	    [ -z "$xV" ] || dieUSAGEpager "verbosity-level specified multiple times\n%s" \
					  "(exclusively use '-v', '-V' or '--verbosity-level' only once)"
	    if [ "$ARG" = "-V" -o "$ARG" = "--verbosity-level" ]; then V="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-verbosity-level|V)=.*' ; then V="${ARG#*=}"
	    else V=`printf "%s" "$ARG" | sed -E 's/-(-verbosity-level|V)//'`; fi
	    [ "$V" -ge 0 ] 2>/dev/null || dieUSAGEpager "Invalid verbosity level '$V' (must be integer >= 0)"
	    xV=1
	    ;;
	-i*|--interface*)
	    [ -z "$xIFC" ] || dieUSAGEpager "interface specified multiple times\n%s" \
					    "(exclusively use '-i', '--interface', '-I' or '--force-interface' only once)"
	    if [ "$ARG" = "-i" -o "$ARG" = "--interface" ]; then IFC="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-interface|i)=.*' ; then IFC="${ARG#*=}"
	    else IFC=`printf "%s" "$ARG" | sed -E 's/-(-interface|i)//'`; fi
	    xIFC=1;
	    ;;
	-I*|--force-interface*)
	    [ -z "$xIFC" ] || dieUSAGEpager "interface specified multiple times\n%s" \
					    "(exclusively use '-i', '--interface', '-I' or '--force-interface' only once)"
	    if [ "$ARG" = "-I" -o "$ARG" = "--force-interface" ]; then STATICIFC="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-force-interface|I)=.*' ; then STATICIFC="${ARG#*=}"
	    else STATICIFC=`printf "%s" "$ARG" | sed -E 's/-(-force-interface|I)//'`; fi
	    IFC=$STATICIFC
	    xIFC=1;
	    ;;
	-l*|--logfile*)
	    [ -z "$xLOGFILE" ] || dieUSAGEpager "logfile specified multiple times\n%s" \
						"(exclusively use '-l', or '--logfile' only once)"
	    if [ "$ARG" = "-l" -o "$ARG" = "--logfile" ]; then LOGFILE="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-logfile|l)=.*' ; then LOGFILE="${ARG#*=}"
	    else LOGFILE=`printf "%s" "$ARG" | sed -E 's/-(-logfile|l)//'`; fi
	    xLOGFILE=1;
	    ;;
	-z*|--logsize*)
	    [ -z "$xLOGSIZE" ] || dieUSAGEpager "logsize specified multiple times\n%s" \
						"(exclusively use '-z' or '--logsize' only once)"
	    if [ "$ARG" = "-z" -o "$ARG" = "--logsize" ]; then LOGSIZE="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-logsize|z)=.*' ; then LOGSIZE="${ARG#*=}"
	    else LOGSIZE=`printf "%s" "$ARG" | sed -E 's/-(-logsize|z)//'`; fi
	    printf "%s" "$LOGSIZE" | grep -iqE '^[0-9]+*[KMG]*$' || dieUSAGEpager "Invalid logsize '$LOGSIZE'"
	    xLOGSIZE=1
	    ;;
	-p*|--pidfile*)
	    [ -z "$xPIDFILE" ] || dieUSAGEpager "pidfile specified multiple times\n%s" \
						"(exclusively use '-p', or '--pidfile' only once)"
	    if [ "$ARG" = "-p" -o "$ARG" = "--pidfile" ]; then PIDFILE="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-pidfile|p)=.*' ; then PIDFILE="${ARG#*=}"
	    else PIDFILE=`printf "%s" "$ARG" | sed -E 's/-(-pidfile|p)//'`; fi
	    xPIDFILE=1;
	    ;;
	-t*|--slow-up-timeout*)
	    [ -z "$xSLOWUPTIMEOUT" ] || dieUSAGEpager "slow-up-timeout specified multiple times\n%s" \
						      "(exclusively use '-t' or '--slow-up-timeout' only once)"
	    if [ "$ARG" = "-t" -o "$ARG" = "--slow-up-timeout" ]; then SLOWUPTIMEOUT="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-slow-up-timeout|t)=.*' ; then SLOWUPTIMEOUT="${ARG#*=}"
	    else SLOWUPTIMEOUT=`printf "%s" "$ARG" | sed -E 's/-(-slow-up-timeout|t)//'`; fi
	    [ "$SLOWUPTIMEOUT" -ge 1 ] 2>/dev/null || dieUSAGEpager "Invalid slow-up-timeout interval '$SLOWUPTIMEOUT' (must be integer >= 1)"
	    xSLOWUPTIMEOUT=1
	    ;;
	-s*|--sleep*|--interval*)
	    [ -z "$xSLEEP" ] || dieUSAGEpager "interval specified multiple times\n%s" \
					      "(exclusively use '-s', '--sleep' or '--interval' only once)"
	    if [ "$ARG" = "-s" -o "$ARG" = "--sleep" -o "$ARG" = "--interval" ]; then SLEEP="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-(sleep|interval)|s)=.*' ; then SLEEP="${ARG#*=}"
	    else SLEEP=`printf "%s" "$ARG" | sed -E 's/-(-(sleep|interval)|s)//'`; fi
	    [ "$SLEEP" -ge 1 ] 2>/dev/null || dieUSAGEpager "Invalid sleep interval '$SLEEP' (must be integer >= 1)"
	    xSLEEP=1
	    ;;
	-g*|--ifup-grace*)
	    [ -z "$xGRACE" ] || dieUSAGEpager "ifup-grace specified multiple times\n%s" \
					      "(exclusively use '-g' or '--ifup-grace' only once)"
	    if [ "$ARG" = "-g" -o "$ARG" = "--ifup-grace" ]; then GRACE="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-ifup-grace|g)=.*' ; then GRACE="${ARG#*=}"
	    else GRACE=`printf "%s" "$ARG" | sed -E 's/-(-ifup-grace|g)//'`; fi
	    [ "$GRACE" -ge 1 ] 2>/dev/null || dieUSAGEpager "Invalid ifup-grace '$GRACE' (must be integer >= 1)"
	    xGRACE=1
	    ;;
	-n*|--max-nolink*)
	    [ -z "$xMAXNOLINK" ] || dieUSAGEpager "max-nolink specified multiple times\n%s" \
						  "(exclusively use '-n' or '--max-nolink' only once)"
	    if [ "$ARG" = "-n" -o "$ARG" = "--max-nolink" ]; then MAXNOLINK="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-max-nolink|n)=.*' ; then MAXNOLINK="${ARG#*=}"
	    else MAXNOLINK=`printf "%s" "$ARG" | sed -E 's/-(-max-nolink|n)//'`; fi
	    [ "$MAXNOLINK" -ge 1 ] 2>/dev/null || dieUSAGEpager "Invalid max-nolink '$MAXNOLINK' (must be integer >= 1)"
	    xMAXNOLINK=1
	    ;;
	-u*|--ifcup*)
	    [ -z "$xIFCUPT" ] || dieUSAGEpager "ifcup specified multiple times\n%s" \
					       "(exclusively use '-u', or '--ifcup' only once)"
	    if [ "$ARG" = "-u" -o "$ARG" = "--ifcup" ]; then IFCUPT="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-ifcup|u)=.*' ; then IFCUPT="${ARG#*=}"
	    else IFCUPT=`printf "%s" "$ARG" | sed -E 's/-(-ifcup|u)//'`; fi
	    xIFCUPT=1;
	    ;;
	-U*|--ifcdown*)
	    [ -z "$xIFCDOWNT" ] || dieUSAGEpager "ifcdown specified multiple times\n%s" \
						 "(exclusively use '-U', or '--ifcdown' only once)"
	    if [ "$ARG" = "-U" -o "$ARG" = "--ifcdown" ]; then IFCDOWNT="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-ifcdown|U)=.*' ; then IFCDOWNT="${ARG#*=}"
	    else IFCDOWNT=`printf "%s" "$ARG" | sed -E 's/-(-ifcdown|U)//'`; fi
	    xIFCDOWNT=1;
	    ;;
	-a*|--alert*)
	    [ -z "$xALERTCMD" ] || dieUSAGEpager "alert specified multiple times\n%s" \
						 "(exclusively use '-a', or '--alert' only once)"
	    if [ "$ARG" = "-a" -o "$ARG" = "--alert" ]; then ALERTCMD="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '-(-alert|a)=.*' ; then ALERTCMD="${ARG#*=}"
	    else ALERTCMD=`printf "%s" "$ARG" | sed -E 's/-(-alert|a)//'`; fi
	    xALERTCMD=1;
	    ;;
	--install-systemd*)
	    [ -z "$xSYSTEMDSERVICENAME" ] || dieUSAGEpager "install-systemd specified multiple times\n%s" \
							   "(exclusively use '-a', or '--install-systemd' only once)"
	    if [ "$ARG" = "--install-systemd" ]; then SYSTEMDSERVICENAME="$1"; shift
	    elif printf "%s" "$ARG" | grep -qEe '--install-systemd=.*' ; then SYSTEMDSERVICENAME="${ARG#*=}"
	    else SYSTEMDSERVICENAME=`printf "%s" "$ARG" | sed -E 's/--install-systemd//'`; fi
	    xSYSTEMDSERVICENAME=1;
	    ;;
	*)
	    [ -z "$xTARGET" ] || dieUSAGEpager "More than one target specified ('%s' + '%s')" "$TARGET" "$ARG"
	    TARGET="$ARG"; xTARGET=1
	    ;;
    esac
done
[ -z "$PINGTARGET" -a -z "$PINGNEXTHOP" ] && dieUSAGEpager "You must allow pinging of target and/or nexthop!\n%s" \
							   "(can't use --no-ping-target and --no-ping-nexthop at the same time)"
[ -n "$TARGET" ] || dieUSAGEpager "%s\n%s" \
				  "Target not specified!" "Specify IP address or resolvable hostname."
warnnl() {
    [ $V -ge 2 ] || return
    local PATN="$1" ; shift
    printf "WARNING: $PATN\n" "$@" 1>&2
    printf "\n\nWARNING\n$nwwatchdog '$TARGET'\n$PATN\n\n\n" "$@" | sh -c "$ALERTCMD"
}
dienl() {
    local PATN="$1 ... aborting!" ; shift
    printf "\nERROR: $PATN\n\n" "$@" 1>&2
    printf "\n\n$nwwatchdog $TARGET ERROR:\n   $PATN\n\n\n" "$@" | sh -c "$ALERTCMD"
    exit 1
}
[ "$LOGFILE" = '-' ] && { LOGFILE=''; LOGSIZE=0 ; LOGSIZEb=0 ;}
[ -n "$LOGFILE" ] && {
    touch "$LOGFILE" 2>/dev/null || \
	dienl "%s\n%s" "Cannot write to logfile '$LOGFILE'." "Fix permissions, run as user with access or specify another --logfile."
}
LOGSIZEb="$LOGSIZE"
case "$LOGSIZEb" in
    *[Kk]) LOGSIZEb=`printf "%s" "$LOGSIZEb" | sed -E 's/[Kk]$//'`;;
    *[Mm]) LOGSIZEb=`printf "%s" "$LOGSIZEb" | sed -E 's/[Mm]$//'`; LOGSIZEb=$((LOGSIZEb*1024));;
    *[Gg]) LOGSIZEb=`printf "%s" "$LOGSIZEb" | sed -E 's/[Gg]$//'`; LOGSIZEb=$((LOGSIZEb*1048576));;
esac
LOGSIZEb=$((LOGSIZEb*1024))

log() {   
    local PATN="%s  $1"; shift
    logentry=$(printf "$PATN" "`date '+%Y-%m-%d %H:%M:%S %z'`" "$@")
    if [ -n "$LOGFILE" ]; then
    	[ "$LOGSIZEb" -gt 0 ] && {
    	    # Remove top 10 lines until log file is smaller than LOGSIZEb,
    	    # silently skip if we can't lock the file
     	    if which flock >/dev/null 2>&1; then
    		local skip=''
    		while [ -z "$skip" -a `stat --printf='%s' $LOGFILE` -gt $LOGSIZEb ]; do
    		    flock -w1 "$LOGFILE" -c "cp '$LOGFILE' '$LOGFILE.$$' ; tail -n +11 '$LOGFILE.$$' >'$LOGFILE'; rm '$LOGFILE.$$'" || skip=y
    		done
	    else
    		while [ `stat --printf='%s' $LOGFILE` -gt $LOGSIZEb ]; do
    		    cp "$LOGFILE" "$LOGFILE.$$" ; tail -n +11 "$LOGFILE.$$" > "$LOGFILE" ; rm "$LOGFILE.$$"
    		done
	    fi
	}
     	if which flock >/dev/null 2>&1; then
    	    flock -w1 "$LOGFILE" -c "printf '%s\n' \"$logentry\" >>'$LOGFILE'" || {
    		warnnl "Could not lock logfile temporarily logging to '%s'\n" "$LOGFILE.$$"
    		TLOGFILE="$LOGFILE"
    		LOGFILE="$LOGFILE.$$"
    		printf "%s\n" "$logentry" >>"$LOGFILE"
    		LOGFILE="$TLOGFILE"
    	    }
    	else
    	    printf "%s\n" "$logentry" >>"$LOGFILE"
    	fi
    else
	printf "%s\n" "$logentry"
    fi
}
error() {
    [ $V -ge 1 ] || return
    local PATN="$1" ; shift
    log "  ERROR: $PATN" "$@"
    printf "\n\nERROR:\n$nwwatchdog '$TARGET'\n$PATN\n\n\n" "$@" | sh -c "$ALERTCMD"
}
die() {
    local PATN="$1 ... aborting!" ; shift
    error "$PATN" "$@"
    exit 1
}
warn() {
    [ $V -ge 2 ] || return
    local PATN="$1" ; shift
    log "WARNING: $PATN" "$@"
    printf "\n\nWARNING:\n$nwwatchdog '$TARGET'\n$PATN\n\n\n" "$@" | sh -c "$ALERTCMD"
}
alert() {
    [ $V -ge 3 ] || return
    local PATN="$1" ; shift
    log "  ALERT: $PATN" "$@"
    printf "\n\nALERT\n$nwwatchdog '$TARGET'\n$PATN\n\n\n" "$@" | sh -c "$ALERTCMD"
}
info() {
    [ $V -ge 4 ] || return
    local PATN="$1" ; shift
    log "   INFO: $PATN" "$@"
}
trace() {
    [ $V -ge 5 ] || return
    local PATN="$1" ; shift
    log "  TRACE: $PATN" "$@"
}
debug() {
    [ $V -ge 6 ] || return
    local PATN="$1" ; shift
    log "  DEBUG: $PATN" "$@"
}

ifreset() {
    [ -n "$IFCUPDOWN" ] || {
	info 'Not resetting interface due to --no-interface-reset.'
    	return 0
    }
    [ -n "$IFC" ] || die "Internal ERROR: No interface to reset!"
    info "Resetting '$IFC'."
    IFCDD=`sh -c "$IFCDOWN" 2>&1`; EXITCODE=$?
    debug "'%s' exited with $EXITCODE and output: '%s'" "$IFCDOWN" "$IFCDD"
    sleep 1
    IFCUD=`sh -c "$IFCUP" 2>&1`|| {
	EXITCODE=$?
	debug "'%s' exited with $EXITCODE and output: '%s'" "$IFCUP" "$IFCUD"
	warn "%s\n\t%s" \
	     "Could not reset interface '$IFC'." \
	     "Check your --if-up and --if-down commands and/or privilegdes of effective user (userid=`id -u`)."
	[ -n "$1" ] && return 1
    }	
    debug "'%s' exited with $EXITCODE and output: '%s'" "$IFCUP" "$IFCUD"
    trace "Sleeping for $GRACE seconds."
    sleep $GRACE
    return $EXITCODE
}

linkcheck() {
    [ -n "$IFC" ] || die "Internal ERROR: No interface to check link for!"
    NOLINK=0
    while true; do
	ip link show $IFC>/dev/null 2>&1 && {
	    ip link show $IFC | grep -oq 'state DOWN' || {
		IPADDRS=''; ip addr show dev $IFC | grep -qE 'inet6? .* scope global' && IPADDRS=y
		[ -n "$IPADDRS" -a -n "$IPADDRALRT" ] \
		    || alert "%s\n\t%s" \
			     "There is no IPv4 or IPv6 global scope ip address on interface '$IFC'!" \
			     "If that is ok, you can disable these alerts with --no-ipaddr-alert."
		return 0
	    }
	}
	NOLINK=$((NOLINK+1))
	[ $MAXNOLINK -gt 0 -a $NOLINK -gt $MAXNOLINK ] && {
	    warn "%s\n\t%s" \
		 "Could not get link up on $MAXNOLINK attempts (with $GRACE seconds between them.)" \
		 "Adjust these values with --max-nolink and --if-up-grace"
	    return 1
	}
	info "No link on $IFC... reset attempt $NOLINK out of $MAXNOLINK (0=infinite)"
	ifreset "$1" 
    done
}

nexthop() {
    NIFC="`ip route get $TADDR | grep -o 'dev [^ ]*' | cut -d' ' -f2`"
    if [ -n "$NIFC" ]; then
	NNEXTHOP="`ip route get $TADDR | grep -oE 'via [^ ]*' | cut -d' ' -f2`"
	[ -z "$NNEXTHOP" ] && {
	    NNEXTHOP="$TADDR"
	    debug "No nexthop detected (ok if same subnet (incl. host-local addr) or peer-to-peer addr), using target as nexthop... "
	    # If it's a host-local address 'ip route get' will give lo as source interface even if addr is on different interface
	    # which will cause 'ping -I$IFC' to fail, so let's figure which the interface with the address is instead
	    [ "$NIFC" = "lo" ] && {
		local ADDR=`printf '%s' "$TADDR" | sed -E 's/\./\\\\./g'`
		[ -n "`ip addr | grep -E "inet $ADDR( |\/)"`" ] && {
		    LIFC="`ip addr | grep -B9999 -E "inet $ADDR( |\/)" | grep -oE '^[0-9]+:\s+[^@:]+' | tail -1 | sed -E 's/.*\s//'`"
		    [ -n "$LIFC" ] && {
			debug "Found $TADDR on local interface '$LIFC' (overriding '$NIFC')"
			NIFC="$LIFC"
		    }
		}
	    }
	}
	if [ "$IFC" = "$NIFC" -a "$NEXTHOP" = "$NNEXTHOP" ]; then
	    trace "No topology changes detected. IFC='%s' NEXTHOP='%s'" "$IFC" "$NEXTHOP"
	    return 0
	elif [ -z "$STATICIFC" ]; then
	    info "Detected topology: IFC='%s' -> '%s' ; NEXTHOP='%s' -> '%s'" "$IFC" "$NIFC" "$NEXTHOP" "$NNEXTHOP"
	    IFC="$NIFC"
	    IFCUP=`printf "%s" "$IFCUPT" | sed -E "s/\%\{IFC\}/$IFC/g"`
	    IFCDOWN=`printf "%s" "$IFCDOWNT" | sed -E "s/\%\{IFC\}/$IFC/g"`
	    ALERTCMD=`printf "%s" "$ALERTCMD" | sed -E "s/\%\{IFC\}/$IFC/g"`
	    NEXTHOP="$NNEXTHOP"
	    return 0
	elif [ "$STATICIFC" = "$NIFC" ]; then
	    info "Detected topology on forced interface '%s': NEXTHOP='%s' -> '%s'" "$IFC" "$NEXTHOP" "$NNEXTHOP"
	    debug "STATICIFC='%s' IFC='%s' NIFC='%s' NEXTHOP='%s' NNEXTHOP='%s'" \
		  "$STATICIFC" "$IFC" "$NIFC" "$NEXTHOP" "$NNEXTHOP"
	    NEXTHOP="$NNEXTHOP"
	    return 0
	else
	    alert "Conflicting topology detected, route to target '%s' (%s) is on interface '%s', but --force-interface='%s'" \
		  "$TARGET" "$TADDR" "$NIFC" "$STATICIFC"
	    return 0
	fi
    else
	info "No route to target '%s' (%s) available." "$TARGET" "$TADDR"
	debug "Hanging on to interface '%s'." "$IFC"
	return 1
    fi
}

[ -n "$FORK" -o -n "$SYSTEMDSERVICENAME" ] && { 
    debug "MAINPID=$$ BASENAME=$nwwatchdog COMM=`cat /proc/$$/comm`"
    NOPTS=''
    [ -z "$PINGNEXTHOP" ] && NOPTS="${NOPTS}N"
    [ -z "$PINGTARGET" ] && NOPTS="${NOPTS}P"
    [ -z "$IPADDRALRT" ] && NOPTS="${NOPTS}A"
    [ -z "$IFCUPDOWN" ] && NOPTS="${NOPTS}R"

    AOPTS="V$V -t$SLOWUPTIMEOUT -s$SLEEP -g$GRACE -n$MAXNOLINK -u'$IFCUPT' -U'$IFCDOWNT' -a'$ALERTCMD' -z$LOGSIZE" 
    [ -z "$STATICIFC" -a -n "$xIFC" ] && AOPTS="$AOPTS -i '$IFC'"
    [ -n "$STATICIFC" ] && AOPTS="$AOPTS -I'$IFC'"
    debug "NOPTS=%s\nAOPTS=%s\n" "$NOPTS" "$AOPTS" 
}
### Systemd service creation
[ -n "$SYSTEMDSERVICENAME" ] && {
    printf "%s" "$SYSTEMDSERVICENAME" | grep -qEe '^[a-zA-Z0-9_-]+$' || \
	dieUSAGEpager "Invalid systemd service name '%s'\n%s" "$SYSTEMDSERVICENAME" \
		      "The SYSTEMDSERVICENAME must contain only alphanumeric characters, hyphens and underscores and be no longer than 236 characters."
    [ `printf "%s" "$SYSTEMDSERVICENAME" | wc -c` -gt 236 ] && dieUSAGEpager "Systemd service name '%s' is too long (max 236 characters)" "$SYSTEMDSERVICENAME"
    
    [ `id -u` -eq 0 ] || die "$nwwatchdog --install-systemd must be run as root"
    
    [ -d /etc/systemd/system/. ] || die "'/etc/systemd/system/' does not exists, systemd '$SYSTEMDSERVICENAME.service' NOT installed!"

    #cat<<EOF
    cat>/etc/systemd/system/nw-watchdog-$SYSTEMDSERVICENAME.service<<EOF
[Unit]
Description=$nwwatchdog for connectivity to $TARGET
Wants=network.target

[Service]
Type=forking
KillMode=process
PIDFile=/var/run/nw-watchdog-$SYSTEMDSERVICENAME.pid
ExecStart=/bin/sh '`readlink -e "$0"`' '$TARGET' -$NOPTS$AOPTS -p/var/run/nw-watchdog-$SYSTEMDSERVICENAME.pid -l/var/log/nw-watchdog-$SYSTEMDSERVICENAME.log

[Install]
WantedBy=sysinit.target
EOF
    systemctl daemon-reload || die "failed to reload systemd"
    systemctl enable nw-watchdog-$SYSTEMDSERVICENAME.service || die "failed to enable the $SYSTEMDSERVICENAME.service"
    systemctl restart nw-watchdog-$SYSTEMDSERVICENAME.service || die "failed to start the $SYSTEMDSERVICENAME.service"
    systemctl status --no-pager nw-watchdog-$SYSTEMDSERVICENAME.service
    exit 0

}

resolve_target() {
    trace "Resolving target '%s' (cached='%s')" "$TARGET" "$TADDR"
    TADDR=`getent ahostsv4 "$TARGET" | head -1 | sed -E 's/^\s*([0-9.]+)\s.*/\1/'`
    [ -n "$TADDR" ] || return 1
    trace "Resolved target '%s' to '%s'" "$TARGET" "$TADDR"
    return 0
}

isup() {
    local ADDR="$1"

    [ "$ADDR" = "$NEXTHOP" ] && {
	# addr is on local subnet (incl. host-local addrs) or peer-to-peer address 
	ip neigh get dev $IFC $ADDR 2>&1 | grep -q 'REACHABLE' && { debug "$ADDR is arp1-up on $IFC" ; return 0 ;}
	ping -q -w2 -c1 -I$IFC $ADDR >/dev/null 2>&1 && { debug "$ADDR is arp-ping-up on $IFC" ; return 0 ;} # also refreshes arp-cache
	ip neigh get dev $IFC $ADDR 2>&1 | grep -q 'REACHABLE' && { debug "$ADDR is arp2-up on $IFC" ; return 0 ;}
    }
    
    # quick check if line is already up
    ping -q -w1 -c1 -I$IFC $ADDR >/dev/null 2>&1 && {
	debug "$ADDR is quick-up via $IFC"
	return 0
    }
    trace 'quick-up failed ... trying slow-up ...'
    
    ping -qA -w$SUDEADLINE -W$SLOWUPTIMEOUT -c$SUCOUNT -I$IFC $ADDR >/dev/null 2>&1 && {
	trace "$ADDR is slow-up via $IFC"
	return 0
    }

    # If ping does not receive any reply packets at all it will exit
    # with code 1. If a packet count and deadline are both specified,
    # and fewer than count packets are received by the time the
    # deadline has arrived, it will also exit with code 1. On other
    # error it exits with code 2. Otherwise it exits with code 0. This
    # makes it possible to use the exit code to see if a host is alive
    # or not.

    # double check that we're up (the above could potentially
    # (but unlikely due to -A) return 1 or 2 even if we're up)
    trace 'slow-up failed or ambigious result ... verifying ...'
    ping -q -w2 -c1 -I$IFC $ADDR >/dev/null  2>&1 && {
	trace '$ADDR is verified-up via $IFC'
	return 0
    }
    # We don't get traffic through
    debug "$ADDR not-up via $IFC"

    [ "$2" = "noresolve" ] && return 1
    local OADDR=$TADDR
    if resolve_target; then
	[ "$OADDR" = "$TADDR" ] || {
	    info "Target '$TARGET' now resolves to '$TADDR', instead of '$OADDR'."
	    nexthop && {
		if [ "$ADDR" = "$OADDR" ]; then # it was target that failed, test again with new TADDR
		    ADDR=$TADDR
		else # it was nexthop that failed, test again with new NEXTHOP
		    ADDR=$NEXTHOP;
		fi
		isup "$ADDR" noresolve && return 0;
	    }
	}
    else
	TADDR=$OADDR
	alert "Target '%s' no longer resolves to an ip address, will keep using '$TADDR'." "$TARGET"
    fi
    return 1
}

[ -n "$PIDFILE" ] || PIDFILE=/run/nw-watchdog.pid
touch "$PIDFILE" 2>/dev/null || die "%s\n%s" "Cannot write to pidfile '$PIDFILE'." \
				    "Specify another --pidfile or check permissions or privileges of effective user (userid=`id -u`)"
PID=`cat "$PIDFILE"`
[ "$PID" -qt 0 ] 2>/dev/null && [ -d /proc/$PID ] && die "Process already running with pid $PID"

### Forking
[ -n "$FORK" ] && {
    if [ -n "$LOGFILE" ]; then AOPTS="$AOPTS -l'$LOGFILE'"
    else AOPTS="$AOPTS -l-"; fi
    AOPTS="$AOPTS -p'$PIDFILE'"
    if [ -x "$0" ]; then
	trace "forking: %s" "'$0' '$TARGET' -D$NOPTS$AOPTS" 
	{ sleep 0.25 ; eval "exec '$0' '$TARGET' -D$NOPTS$AOPTS" ;} &
    else
	trace "forking: %s" "sh '$0' '$TARGET' -D$NOPTS$AOPTS"
	{ sleep 0.25 ;eval "exec sh '$0' '$TARGET' -D$NOPTS$AOPTS" ;} &
    fi
    exit 0
}

printf $$ > "$PIDFILE"
debug "PID=$$ BASENAME=$nwwatchdog COMM=`cat /proc/$$/comm`"

debug "\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s" \
      "~~~ SETTINGS ~~~" \
      "TARGET='$TARGET'" \
      "PINGNEXTHOP='$PINGNEXTHOP'" \
      "PINGTARGET='$PINGTARGET'" \
      "IPADDRALRT='$IPADDRALRT'" \
      "IFCUPDOWN='$IFCUPDOWN'" \
      "FORK='$FORK'" \
      "V='$V'" \
      "IFC='$IFC'" \
      "STATICIFC='$STATICIFC'" \
      "LOGFILE='$LOGFILE'" \
      "LOGSIZE='$LOGSIZE' ($LOGSIZEb bytes)" \
      "PIDFILE='$PIDFILE'" \
      "SLOWUPTIMEOUT='$SLOWUPTIMEOUT'" \
      "SLEEP='$SLEEP'" \
      "GRACE='$GRACE'" \
      "MAXNOLINK='$MAXNOLINK'" \
      "IFCUPT='$IFCUPT'" \
      "IFCDOWNT='$IFCDOWNT'" \
      "ALERTCMD='$ALERTCMD'"

debug "Resolving, or if already IP address, cleaning zero-padding of, target '%s'" "$TARGET"
# Clean up zero-padding if TARGET is an IP address
printf "%s" "$TARGET" | grep -qE '^((0*[0-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}(0*[0-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$' \
    && TARGET=`printf "%s" "$TARGET" | sed -E 's/(^|\.)0+([1-9]+)/\1\2/g'`

TADDR=''
while [ -z "$TADDR" ]; do
    resolve_target || {
	warn "Target '%s' does not resolve to an IPv4 address. Make sure name resoloution funtions on the system\n\t%s\n\t%s" \
	     "$TARGET" \
	     '... or stop this instance and start it again using a valid hostname / FQDN or IP address' \
	     "... sleeping for $GRACE seconds."
	sleep $GRACE
    }
done

if [ -n "$IFC" ]; then
    IFCUP=`printf "%s" "$IFCUPT" | sed -E "s/\%\{IFC\}/$IFC/g"`
    IFCDOWN=`printf "%s" "$IFCDOWNT" | sed -E "s/\%\{IFC\}/$IFC/g"`
    ALERTCMD=`printf "%s" "$ALERTCMD" | sed -E "s/\%\{IFC\}/$IFC/g"`
    linkcheck && {
	nexthop || {
	    ifreset
	    nexthop
	}
    }
else
    nexthop
    EXITCODE=$?
    while [ $EXITCODE -ne 0 ]; do
	    warn "No interface specified and no route to target '%s' (%s) available, make sure interface comes up,\n\t%s\n\t%s" \
		 "$TARGET" "$TADDR" \
		 'or stop this instance and start it again using --interface or --force-interface to bring it up automatically.' \
		 "... sleeping for $GRACE seconds."
	    sleep $GRACE
	    nexthop
	    EXITCODE=$?
    done
fi
	    

while true; do
    if [ -n "$PINGTARGET" ]; then
	while isup $TADDR; do
	    debug "target '%s' (%s) is up, sleeping for $SLEEP seconds." "$TARGET" "$TADDR"
	    sleep $SLEEP
	done
	info "Not getting replies from target '%s' (%s), checking link and topology." "$TARGET" "$TADDR"
	if linkcheck && nexthop; then
	    isup "$TADDR" || {
	    	if [ -n "$PINGNEXTHOP" ]; then 
	    	    if isup "$NEXTHOP" noresolve; then
	    		alert "Not getting replies from target '%s' (%s) on interface '%s', but nexthop '%s' is reachable... sleeping for %d seconds." \
	    		      "$TARGET" "$TADDR" "$IFC" "$NEXTHOP" $GRACE
	    		sleep $GRACE
	    	    else
	    		alert "Not getting replies from target '%s' (%s) on interface '%s', and nexthop '%s' is not reachable.\n\t%s" \
	    		      "$TARGET" "$TADDR" "$IFC" "$NEXTHOP" \
			      'Resetting interface.'
	    		ifreset
	    	    fi
	    	else
	    	    alert "Not getting replies from target '%s' (%s) on interface '%s'.\n\t%s" "$TARGET" "$TADDR" "$IFC" \
			  'Resetting interface.'
	    	    ifreset
	    	fi
	    }
	else
	    alert "Not getting replies from target '%s' (%s) and no route to target available, resetting interface '%s'." \
		  "$TARGET" "$TADDR" "$IFC"
	    ifreset
	fi
	    
    else
	while isup $NEXTHOP; do
	    debug "nexthop (%s) for target '%s' (%s) is up, sleeping for $SLEEP seconds." "$NEXTHOP" "$TARGET" "$TADDR"
	    sleep $SLEEP
	done
	info "nexthop '%s' (for --no-ping-target '%s' (%s)) on interface '%s', not reachable, checking link and nexthop." \
	     "$NEXTHOP" "$TARGET" "$TADDR" "$IFC"
	if linkcheck && resolve_target && nexthop; then 
	    isup "$NEXTHOP" || {
		alert "nexthop '%s' (for --no-ping-target '%s' (%s)), not reachable, resetting interface '%s'." \
		      "$NEXTHOP" "$TARGET" "$TADDR" "$IFC"
		ifreset
	    }
	else
	    alert "No route to --no-ping-target '%s' (%s). Resetting interface '%s'." "$TARGET" "$TADDR" "$IFC"
	    ifreset
	fi
    fi
done
die "Internal error: EOF"
